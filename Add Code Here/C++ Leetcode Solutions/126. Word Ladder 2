class Solution {
public:
    unordered_map<string,int> mp;
    vector<vector<string>> ans;
    string start;

    void dfs(string word,vector<string> &temp){
        temp.push_back(word);
        
        if(word==start){
            reverse(temp.begin(), temp.end());
            ans.push_back(temp);
            reverse(temp.begin(), temp.end());

            return;
        }

        string original = word;
        for(int i=0;i<word.length();++i){
                char ori = word[i];

                for(char ch='a';ch <= 'z';++ch){
                    word[i]=ch;

                    if(mp.find(word)!=mp.end()){

                        if(mp[word]+1 ==mp[original]){
                            dfs(word,temp);
                            temp.pop_back();
                        }
                    }
                }

                word[i]=ori;
            }
    }
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> st(wordList.begin(), wordList.end());
        start = beginWord;

        queue<string> q;
        q.push(beginWord);
        mp[beginWord] = 1;
        st.erase(beginWord);

        while(!q.empty()){
            string word = q.front(); q.pop(); 

            int step = mp[word];

            if(word==endWord) break;
            for(int i=0;i<word.length();++i){
                char ori = word[i];
                
                for(char ch='a';ch <= 'z';++ch){
                    word[i]=ch;
                    
                    if(st.find(word)!=st.end()){
                        q.push(word); mp[word]=step+1;
                        st.erase(word);
                    }
                }
                word[i]=ori;
            }
        }
        
        if(mp.find(endWord)==mp.end()) return {};

        vector<string> temp; 
        dfs(endWord,temp);
        return ans;
    }
};
